#!/usr/bin/env python
import os
import platform
import sys
import time
import traceback
import threading
import argparse

from core.common import check_connection, check_sudo, get_ex_message, patch_parser
from core.httpd import start_httpd
from core.log import create_log_directory, log_error, start_logd
from core.settings import config, read_config, CHECK_CONNECTION_MAX_RETRIES, CONFIG_FILE, HOMEPAGE, IS_WIN, NAME, VERSION
from core.update import update_ipcat, update_trails
import six

def check_ssl_requirements():
    if config.USE_SSL and six.PY2:
        try:
            import OpenSSL
        except ImportError:
            if IS_WIN:
                exit("[!] Please install 'pyopenssl' (e.g., 'pip install pyopenssl')")
            else:
                distros_install_cmd = {
                    ("fedora", "centos"): "sudo yum install pyOpenSSL",
                    ("debian", "ubuntu"): "sudo apt-get install python-openssl"
                }
                distro = platform.uname()[3].lower()
                for distros, install_cmd in distros_install_cmd.items():
                    if any(distro.startswith(d) for d in distros):
                        exit(f"[!] Please install 'pyOpenSSL' (e.g., '{install_cmd}')")
                exit("[!] Please install 'pyOpenSSL'")
        
        if not config.SSL_PEM or not os.path.isfile(config.SSL_PEM):
            hint = f"openssl req -new -x509 -keyout {config.SSL_PEM or 'server.pem'} -out {config.SSL_PEM or 'server.pem'} -days 365 -nodes -subj '/O={NAME} CA/C=EU'"
            exit(f"[!] Invalid configuration value for 'SSL_PEM' ('{config.SSL_PEM}')\n[?] (hint: \"{hint}\")")

def update_timer():
    retries = 0
    while retries < CHECK_CONNECTION_MAX_RETRIES and not check_connection():
        sys.stdout.write(f"[!] Can't update because of lack of Internet connection (waiting{'...' if retries else ''}")
        sys.stdout.flush()
        time.sleep(10)
        retries += 1

    if retries:
        print(")")

    if retries == CHECK_CONNECTION_MAX_RETRIES:
        print("[x] Going to continue without online update")
        update_trails(offline=True)
    else:
        update_trails()
        update_ipcat()

    threading.Timer(config.UPDATE_PERIOD, update_timer).start()

def main():
    print(f"{NAME} (server) #v{VERSION} {{{HOMEPAGE}}}\n")

    parser = argparse.ArgumentParser(description="Maltrail server")
    parser.add_argument("-c", "--config-file", default=CONFIG_FILE, help=f"Configuration file (default: '{os.path.basename(CONFIG_FILE)}')")
    parser.add_argument("--debug", action="store_true", help="Enable debug mode")
    args = parser.parse_args()

    print(f"[*] Starting @ {time.strftime('%X /%Y-%m-%d/')}\n")

    read_config(args.config_file)
    if args.debug:
        config.SHOW_DEBUG = True

    check_ssl_requirements()

    if config.UDP_ADDRESS and config.UDP_PORT:
        if config.UDP_PORT <= 1024 and not config.DISABLE_CHECK_SUDO and not check_sudo():
            exit(f"[!] Please run '{__file__}' with root privileges when using 'UDP_ADDRESS' configuration value")

        create_log_directory()
        start_logd(address=config.UDP_ADDRESS, port=config.UDP_PORT, join=False)

    try:
        if config.USE_SERVER_UPDATE_TRAILS:
            update_timer()

        start_httpd(
            address=config.HTTP_ADDRESS,
            port=config.HTTP_PORT,
            pem=config.SSL_PEM if config.USE_SSL else None,
            join=True
        )
    except KeyboardInterrupt:
        print("\r[x] Stopping (Ctrl-C pressed)")

if __name__ == "__main__":
    exit_code = 0

    try:
        main()
    except SystemExit as ex:
        message = get_ex_message(ex)
        if isinstance(message, six.string_types) and message.strip('0'):
            print(message)
            exit_code = 1
    except IOError:
        log_error("\n\n[!] Session abruptly terminated\n[?] (hint: \"https://stackoverflow.com/a/20997655\")")
        exit_code = 1
    except Exception:
        msg = f"\r[!] Unhandled exception occurred ('{sys.exc_info()[1]}')"
        msg += f"\n[x] Please report the following details at 'https://github.com/stamparm/maltrail/issues':\n---\n'{traceback.format_exc()}'\n---"
        log_error(f"\n\n{msg.replace('\r', '')}")
        print(msg)
        exit_code = 1
    finally:
        if not any(arg in sys.argv for arg in ("--version", "-h", "--help")):
            print(f"\n[*] Ending @ {time.strftime('%X /%Y-%m-%d/')}")
        sys.exit(exit_code)
